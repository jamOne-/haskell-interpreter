(isPrime :: bool) (n :: int) =
    let (aux :: bool) (i :: int) =
            if n == i
            then True
            else if n `mod` i == 0
                then False
                else (aux (i + 1))
    in (aux 2);

(primes :: int-list) =
    let (aux :: int-list) (i :: int) =
            if isPrime i
            then i:(aux (i + 1))
            else (aux (i + 1))
    in (aux 2);

(take :: int-list) (x:xs :: int-list) (0 :: int) = [];
(take :: int-list) (x:xs :: int-list) (n :: int) = x:(take xs (n - 1));

take primes 30;
take primes 30;
take primes 30;
take primes 30;
take primes 30;
take primes 30;
take primes 30
