data List = Empty | Cons int-list List;

(map :: List) (fn :: int-list -> int-list) (Empty :: List) = Empty;
(map :: List) (fn :: int-list -> int-list) (Cons n xs :: List) = Cons (fn n) (map fn xs);

((++) :: List) (Empty :: List) (ys :: List) = ys;
((++) :: List) (Cons x xs :: List) (ys :: List) = Cons x (xs ++ ys);

(subsets :: List) ([] :: int-list) = Cons [] Empty;
(subsets :: List) (x:xs :: int-list) =
  let (result :: List) = (subsets xs)
  in (result ++ (map \(xs :: int-list) -> (x:xs) result));

subsets [1, 2, 3]
